<?xml version="1.0" encoding="UTF-8"?>
<testsuites tests="325" failures="0" disabled="0" errors="0" timestamp="2019-11-12T01:53:54" time="0.012" name="AllTests">
  <testsuite name="AllocatorTest/0" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/0" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/0" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/0" />
    <testcase name="Move" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/0" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;float, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/0" />
  </testsuite>
  <testsuite name="AllocatorTest/1" tests="5" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/1" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0.001" classname="AllocatorTest/1" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/1" />
    <testcase name="Move" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/1" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;float, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/1" />
  </testsuite>
  <testsuite name="AllocatorTest/2" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
    <testcase name="Move" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;int, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/2" />
  </testsuite>
  <testsuite name="AllocatorTest/3" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
    <testcase name="Move" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;int, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/3" />
  </testsuite>
  <testsuite name="AllocatorTest/4" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
    <testcase name="Move" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::AlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/4" />
  </testsuite>
  <testsuite name="AllocatorTest/5" tests="5" failures="0" disabled="0" errors="0" time="0">
    <testcase name="AllocatorAlignAllocatesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
    <testcase name="VectorAllocatesAndResizesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
    <testcase name="VectorAllocatesAndReservesWithAlignment" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
    <testcase name="Move" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
    <testcase name="StatelessAllocatorUsesNoMemory" type_param="gmx::Allocator&lt;gmx::BasicVector&lt;float&gt;, gmx::PageAlignedAllocationPolicy&gt;" status="run" time="0" classname="AllocatorTest/5" />
  </testsuite>
  <testsuite name="AllocatorUntypedTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="Comparison" status="run" time="0" classname="AllocatorUntypedTest" />
  </testsuite>
  <testsuite name="EmptyArrayRefTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IsEmpty" status="run" time="0" classname="EmptyArrayRefTest" />
  </testsuite>
  <testsuite name="EmptyConstArrayRefTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IsEmpty" status="run" time="0" classname="EmptyConstArrayRefTest" />
  </testsuite>
  <testsuite name="ArrayRefTest/0" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char&gt;" status="run" time="0" classname="ArrayRefTest/0" />
  </testsuite>
  <testsuite name="ArrayRefTest/1" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char&gt;" status="run" time="0" classname="ArrayRefTest/1" />
  </testsuite>
  <testsuite name="ArrayRefTest/2" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int&gt;" status="run" time="0" classname="ArrayRefTest/2" />
  </testsuite>
  <testsuite name="ArrayRefTest/3" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int&gt;" status="run" time="0" classname="ArrayRefTest/3" />
  </testsuite>
  <testsuite name="ArrayRefTest/4" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long&gt;" status="run" time="0" classname="ArrayRefTest/4" />
  </testsuite>
  <testsuite name="ArrayRefTest/5" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long&gt;" status="run" time="0" classname="ArrayRefTest/5" />
  </testsuite>
  <testsuite name="ArrayRefTest/6" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;long long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;long long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;long long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;long long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;long long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;long long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long long&gt;" status="run" time="0" classname="ArrayRefTest/6" />
  </testsuite>
  <testsuite name="ArrayRefTest/7" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long long&gt;" status="run" time="0" classname="ArrayRefTest/7" />
  </testsuite>
  <testsuite name="ArrayRefTest/8" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float&gt;" status="run" time="0" classname="ArrayRefTest/8" />
  </testsuite>
  <testsuite name="ArrayRefTest/9" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double&gt;" status="run" time="0" classname="ArrayRefTest/9" />
  </testsuite>
  <testsuite name="ArrayRefTest/10" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;char const&gt;" status="run" time="0" classname="ArrayRefTest/10" />
  </testsuite>
  <testsuite name="ArrayRefTest/11" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned char const&gt;" status="run" time="0" classname="ArrayRefTest/11" />
  </testsuite>
  <testsuite name="ArrayRefTest/12" tests="9" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0.001" classname="ArrayRefTest/12" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;int const&gt;" status="run" time="0" classname="ArrayRefTest/12" />
  </testsuite>
  <testsuite name="ArrayRefTest/13" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned int const&gt;" status="run" time="0" classname="ArrayRefTest/13" />
  </testsuite>
  <testsuite name="ArrayRefTest/14" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long const&gt;" status="run" time="0" classname="ArrayRefTest/14" />
  </testsuite>
  <testsuite name="ArrayRefTest/15" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long const&gt;" status="run" time="0" classname="ArrayRefTest/15" />
  </testsuite>
  <testsuite name="ArrayRefTest/16" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;long long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;long long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;long long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;long long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;long long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;long long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;long long const&gt;" status="run" time="0" classname="ArrayRefTest/16" />
  </testsuite>
  <testsuite name="ArrayRefTest/17" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;unsigned long long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;unsigned long long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;unsigned long long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;unsigned long long const&gt;" status="run" time="0" classname="ArrayRefTest/17" />
  </testsuite>
  <testsuite name="ArrayRefTest/18" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;float const&gt;" status="run" time="0" classname="ArrayRefTest/18" />
  </testsuite>
  <testsuite name="ArrayRefTest/19" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MakeWithAssignmentWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="MakeWithNonConstAssignmentWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructWithNonConstTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromPointersWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromNonConstPointersWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromVectorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromNonConstVectorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
    <testcase name="ConstructFromStructFieldWithTemplateConstructorWorks" type_param="gmx::ArrayRef&lt;double const&gt;" status="run" time="0" classname="ArrayRefTest/19" />
  </testsuite>
  <testsuite name="KeyValueTreeSerializerTest" tests="4" failures="0" disabled="0" errors="0" time="0.002">
    <testcase name="EmptyTree" status="run" time="0" classname="KeyValueTreeSerializerTest" />
    <testcase name="SimpleObject" status="run" time="0.001" classname="KeyValueTreeSerializerTest" />
    <testcase name="ObjectWithArrays" status="run" time="0" classname="KeyValueTreeSerializerTest" />
    <testcase name="ObjectWithObjects" status="run" time="0.001" classname="KeyValueTreeSerializerTest" />
  </testsuite>
  <testsuite name="TreeValueTransformTest" tests="6" failures="0" disabled="0" errors="0" time="0.002">
    <testcase name="SimpleTransforms" status="run" time="0" classname="TreeValueTransformTest" />
    <testcase name="SimpleTransformsCaseAndDashInsensitive" status="run" time="0.001" classname="TreeValueTransformTest" />
    <testcase name="SimpleTransformsToObject" status="run" time="0" classname="TreeValueTransformTest" />
    <testcase name="ObjectFromString" status="run" time="0" classname="TreeValueTransformTest" />
    <testcase name="ObjectFromMultipleStrings" status="run" time="0" classname="TreeValueTransformTest" />
    <testcase name="ScopedTransformRules" status="run" time="0" classname="TreeValueTransformTest" />
  </testsuite>
  <testsuite name="TreeValueTransformErrorTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="ConversionError" status="run" time="0" classname="TreeValueTransformErrorTest" />
  </testsuite>
  <testsuite name="RegexBasicTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="BasicMatchesWorkWhenSupported" status="run" time="0" classname="RegexBasicTest" />
    <testcase name="MatchesForCharacterClassesWorkWhenSupported" status="run" time="0" classname="RegexBasicTest" />
  </testsuite>
  <testsuite name="LoggerTest" tests="5" failures="0" disabled="0" errors="0" time="0.002">
    <testcase name="EmptyLoggerWorks" status="run" time="0" classname="LoggerTest" />
    <testcase name="LogsToStream" status="run" time="0" classname="LoggerTest" />
    <testcase name="LogsToFile" status="run" time="0.001" classname="LoggerTest" />
    <testcase name="LevelFilteringWorks" status="run" time="0" classname="LoggerTest" />
    <testcase name="LogsToMultipleStreams" status="run" time="0.001" classname="LoggerTest" />
  </testsuite>
  <testsuite name="MutexBasicTest" tests="4" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CanBeMade" status="run" time="0" classname="MutexBasicTest" />
    <testcase name="CanBeLocked" status="run" time="0" classname="MutexBasicTest" />
    <testcase name="CanBeTryLocked" status="run" time="0" classname="MutexBasicTest" />
    <testcase name="CanBeUsedInLockGuard" status="run" time="0" classname="MutexBasicTest" />
  </testsuite>
  <testsuite name="MutexTaskTest" tests="3" failures="0" disabled="0" errors="0" time="0">
    <testcase name="MutualExclusionWorksWithLock" status="run" time="0" classname="MutexTaskTest" />
    <testcase name="MutualExclusionWorksWithTryLockOnOtherThread" status="run" time="0" classname="MutexTaskTest" />
    <testcase name="MutualExclusionWorksWithTryLockOnSameThread" status="run" time="0" classname="MutexTaskTest" />
  </testsuite>
  <testsuite name="PathTest" tests="4" failures="0" disabled="0" errors="0" time="0">
    <testcase name="StripSourcePrefixWorks" status="run" time="0" classname="PathTest" />
    <testcase name="ConcatenateBeforeExtensionWorks" status="run" time="0" classname="PathTest" />
    <testcase name="GetParentPathWorks" status="run" time="0" classname="PathTest" />
    <testcase name="GetParentPathAndBasenameWorks" status="run" time="0" classname="PathTest" />
  </testsuite>
  <testsuite name="PhysicalNodeCommunicatorTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="CanConstruct" status="run" time="0" classname="PhysicalNodeCommunicatorTest" />
    <testcase name="CanCallBarrier" status="run" time="0" classname="PhysicalNodeCommunicatorTest" />
  </testsuite>
  <testsuite name="StringUtilityTest" tests="7" failures="0" disabled="0" errors="0" time="0">
    <testcase name="StartsWith" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="EndsWith" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="StripSuffixIfPresent" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="StripString" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="SplitString" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="SplitDelimitedString" status="run" time="0" classname="StringUtilityTest" />
    <testcase name="SplitAndTrimDelimitedString" status="run" time="0" classname="StringUtilityTest" />
  </testsuite>
  <testsuite name="FormatStringTest" tests="2" failures="0" disabled="0" errors="0" time="0">
    <testcase name="HandlesBasicFormatting" status="run" time="0" classname="FormatStringTest" />
    <testcase name="HandlesLongStrings" status="run" time="0" classname="FormatStringTest" />
  </testsuite>
  <testsuite name="StringFormatterTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="HandlesBasicFormatting" status="run" time="0" classname="StringFormatterTest" />
  </testsuite>
  <testsuite name="formatAndJoinTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="Works" status="run" time="0" classname="formatAndJoinTest" />
  </testsuite>
  <testsuite name="JoinStringsTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="Works" status="run" time="0" classname="JoinStringsTest" />
  </testsuite>
  <testsuite name="ReplaceAllTest" tests="6" failures="0" disabled="0" errors="0" time="0">
    <testcase name="HandlesEmptyStrings" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesNoMatches" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesMatchesAtEnds" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesMultipleMatches" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesWordBoundaries" status="run" time="0" classname="ReplaceAllTest" />
    <testcase name="HandlesPossibleRecursiveMatches" status="run" time="0" classname="ReplaceAllTest" />
  </testsuite>
  <testsuite name="TextLineWrapperTest" tests="10" failures="0" disabled="0" errors="0" time="0.002">
    <testcase name="HandlesEmptyStrings" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesTrailingWhitespace" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesTrailingNewlines" status="run" time="0.001" classname="TextLineWrapperTest" />
    <testcase name="WrapsCorrectly" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="WrapsCorrectlyWithExistingBreaks" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesIndent" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesIndentWithEmptyLines" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesHangingIndent" status="run" time="0" classname="TextLineWrapperTest" />
    <testcase name="HandlesContinuationCharacter" status="run" time="0.001" classname="TextLineWrapperTest" />
    <testcase name="WrapsCorrectlyWithExtraWhitespace" status="run" time="0" classname="TextLineWrapperTest" />
  </testsuite>
  <testsuite name="TextWriterTest" tests="6" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="WritesLines" status="run" time="0" classname="TextWriterTest" />
    <testcase name="WritesLinesInParts" status="run" time="0" classname="TextWriterTest" />
    <testcase name="WritesWrappedLines" status="run" time="0" classname="TextWriterTest" />
    <testcase name="WritesLinesInPartsWithWrapper" status="run" time="0.001" classname="TextWriterTest" />
    <testcase name="TracksNewlines" status="run" time="0" classname="TextWriterTest" />
    <testcase name="PreservesTrailingWhitespace" status="run" time="0" classname="TextWriterTest" />
  </testsuite>
  <testsuite name="TypeTraitsTest" tests="1" failures="0" disabled="0" errors="0" time="0">
    <testcase name="IsIntegralConstant" status="run" time="0" classname="TypeTraitsTest" />
  </testsuite>
  <testsuite name="BitmaskTest32_11/BitmaskTest32" tests="6" failures="0" disabled="0" errors="0" time="0">
    <testcase name="SetAndClear/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="InitBit/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="InitLowBits/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="Disjoint/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="Union/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
    <testcase name="ToHex/0" value_param="11" status="run" time="0" classname="BitmaskTest32_11/BitmaskTest32" />
  </testsuite>
  <testsuite name="BitmaskTest64_10_42/BitmaskTest64" tests="12" failures="0" disabled="0" errors="0" time="0">
    <testcase name="SetAndClear/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="SetAndClear/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="InitBit/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="InitBit/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="InitLowBits/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="InitLowBits/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="Disjoint/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="Disjoint/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="Union/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="Union/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="ToHex/0" value_param="10" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
    <testcase name="ToHex/1" value_param="42" status="run" time="0" classname="BitmaskTest64_10_42/BitmaskTest64" />
  </testsuite>
  <testsuite name="BitmaskTest128_9_78/BitmaskTest128" tests="12" failures="0" disabled="0" errors="0" time="0">
    <testcase name="SetAndClear/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="SetAndClear/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="InitBit/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="InitBit/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="InitLowBits/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="InitLowBits/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="Disjoint/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="Disjoint/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="Union/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="Union/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="ToHex/0" value_param="9" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
    <testcase name="ToHex/1" value_param="78" status="run" time="0" classname="BitmaskTest128_9_78/BitmaskTest128" />
  </testsuite>
  <testsuite name="WithAndWithoutMutex/DifferentTasksTest" tests="9" failures="0" disabled="0" errors="0" time="0">
    <testcase name="StdAsyncWorksWithDefaultPolicy/0" value_param="48-byte object &lt;08-0D 99-09 01-00 00-00 A0-A0 8A-09 01-00 00-00 05-00 73-2F 62-69 74-6D 61-73 6B-2E 68-00 00-90 90-C3 C2-90 D3-7F 00-00 00-00 00-00 00-00 00-90&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDefaultPolicy/1" value_param="48-byte object &lt;08-0D 99-09 01-00 00-00 C0-A0 8A-09 01-00 00-00 03-00 73-2F 62-69 74-6D 61-73 6B-2E 68-00 00-90 90-C3 C2-90 D3-7F 00-00 00-00 00-00 00-00 03-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDefaultPolicy/2" value_param="48-byte object &lt;08-0D 99-09 01-00 00-00 A0-A1 8A-09 01-00 00-00 03-00 73-2F 62-69 74-6D 61-73 6B-2E 68-00 00-90 90-C3 C2-90 D3-7F 00-00 00-00 00-00 00-00 03-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithAsyncLaunchPolicy/0" value_param="48-byte object &lt;08-0D 99-09 01-00 00-00 A0-A0 8A-09 01-00 00-00 03-00 78-2F 44-69 66-66 65-72 65-6E 74-54 61-73 40-C0 C2-90 D3-7F 00-00 54-65 73-74 33-32 03-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithAsyncLaunchPolicy/1" value_param="48-byte object &lt;08-0D 99-09 01-00 00-00 C0-A0 8A-09 01-00 00-00 03-00 78-2F 44-69 66-66 65-72 65-6E 74-54 61-73 40-C0 C2-90 D3-7F 00-00 54-65 73-74 33-32 03-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithAsyncLaunchPolicy/2" value_param="48-byte object &lt;08-0D 99-09 01-00 00-00 A0-A1 8A-09 01-00 00-00 03-00 78-2F 44-69 66-66 65-72 65-6E 74-54 61-73 40-C0 C2-90 D3-7F 00-00 54-65 73-74 33-32 03-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDeferredLaunchPolicy/0" value_param="48-byte object &lt;08-0D 99-09 01-00 00-00 A0-A0 8A-09 01-00 00-00 03-00 73-79 6E-63 4C-61 75-6E 63-68 50-6F 6C-69 80-12 C3-90 D3-7F 00-00 00-00 00-00 00-00 03-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDeferredLaunchPolicy/1" value_param="48-byte object &lt;08-0D 99-09 01-00 00-00 C0-A0 8A-09 01-00 00-00 03-00 73-79 6E-63 4C-61 75-6E 63-68 50-6F 6C-69 80-12 C3-90 D3-7F 00-00 00-00 00-00 00-00 03-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
    <testcase name="StdAsyncWorksWithDeferredLaunchPolicy/2" value_param="48-byte object &lt;08-0D 99-09 01-00 00-00 A0-A1 8A-09 01-00 00-00 03-00 73-79 6E-63 4C-61 75-6E 63-68 50-6F 6C-69 80-12 C3-90 D3-7F 00-00 00-00 00-00 00-00 03-00&gt;" status="run" time="0" classname="WithAndWithoutMutex/DifferentTasksTest" />
  </testsuite>
  <testsuite name="ParsesLinesDifferently/TextReaderTest" tests="7" failures="0" disabled="0" errors="0" time="0.001">
    <testcase name="UsingDifferentConfigurations/0" value_param="56-byte object &lt;C0-20 C3-90 D3-7F 00-00 10-22 C3-90 D3-7F 00-00 10-22 C3-90 D3-7F 00-00 60-8B 8D-09 01-00 00-00 10-22 C3-90 D3-7F 00-00 60-23 C3-90 D3-7F 00-00 60-23 C3-90 D3-7F 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/1" value_param="56-byte object &lt;C0-20 C3-90 D3-7F 00-00 10-22 C3-90 D3-7F 00-00 10-22 C3-90 D3-7F 00-00 70-8B 8D-09 01-00 00-00 10-22 C3-90 D3-7F 00-00 60-23 C3-90 D3-7F 00-00 60-23 C3-90 D3-7F 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/2" value_param="56-byte object &lt;90-2D C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 80-8B 8D-09 01-00 00-00 20-24 C3-90 D3-7F 00-00 70-25 C3-90 D3-7F 00-00 70-25 C3-90 D3-7F 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/3" value_param="56-byte object &lt;90-2D C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 90-8B 8D-09 01-00 00-00 20-34 C3-90 D3-7F 00-00 70-35 C3-90 D3-7F 00-00 70-35 C3-90 D3-7F 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/4" value_param="56-byte object &lt;90-2D C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 C0-8B 8D-09 01-00 00-00 20-34 C3-90 D3-7F 00-00 70-35 C3-90 D3-7F 00-00 70-35 C3-90 D3-7F 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/5" value_param="56-byte object &lt;90-2D C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 E0-8B 8D-09 01-00 00-00 20-34 C3-90 D3-7F 00-00 70-35 C3-90 D3-7F 00-00 70-35 C3-90 D3-7F 00-00&gt;" status="run" time="0.001" classname="ParsesLinesDifferently/TextReaderTest" />
    <testcase name="UsingDifferentConfigurations/6" value_param="56-byte object &lt;90-2D C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 E0-2E C3-90 D3-7F 00-00 10-8C 8D-09 01-00 00-00 20-34 C3-90 D3-7F 00-00 70-35 C3-90 D3-7F 00-00 70-35 C3-90 D3-7F 00-00&gt;" status="run" time="0" classname="ParsesLinesDifferently/TextReaderTest" />
  </testsuite>
</testsuites>
